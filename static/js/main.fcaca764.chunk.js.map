{"version":3,"sources":["images/close-icon.svg","images/profile-pencil.svg","images/button-add.svg","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","components/ImagePopup.js","utils/Api.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/DeleteCardPopup.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","CurrentUserContext","React","createContext","Card","name","link","likes","owner","_id","onCardClick","onCardLike","onCardDelete","currentUser","useContext","isOwn","cardDeleteButtonClassName","isLiked","some","i","cardLikeButtonClassName","type","onClick","src","alt","length","Main","props","onEditAvatar","avatar","onEditProfile","profilePencil","about","onAddPlace","buttonAdd","cards","map","item","key","Footer","ImagePopup","isOpen","onClose","closeIcon","card","api","url","headers","this","fetch","method","then","res","ok","json","Promise","reject","status","value","body","JSON","stringify","id","putLikeCards","deleteLikeCards","authorization","PopupWithForm","title","action","onSubmit","noValidate","children","submitIsValid","disabled","buttonText","EditProfilePopup","useState","setName","nameIsValid","setNameIsValid","nameErrorMessage","setNameErrorMessage","description","setDescription","descriptionIsValid","setDescriptionIsValid","descriptionErrorMessage","setDescriptionErrorMessage","useEffect","e","preventDefault","onUpdateUser","placeholder","required","minLength","maxLength","autoComplete","onChange","target","validationMessage","EditAvatarPopup","userAvatarRef","useRef","avatarIsValid","setAvatarIsValid","avatarErrorMessage","setAvatarErrorMessage","onUpdateAvatar","current","ref","AddPlacePopup","cardName","setCardName","cardNameIsValid","setCardNameIsValid","cardNameErrorMessage","setCardNameErrorMessage","setLink","linkIsValid","setLinkIsValid","linkErrorMessage","setLinkErrorMessage","DeleteCardPopup","handleCardDelete","cardId","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isImagePopupOpen","setIsImagePopupOpen","isDeleteCardPopup","setDeleteCardPopup","setCardId","selectedCard","setSelectedCard","setCurrentUser","setCards","getUserMe","data","catch","err","console","log","getAllCards","closeAllPopups","userInfo","Provider","cardData","changeLikeCardStatus","newCard","newCards","c","patchUsersMe","patchUsersAvatar","postAddCard","deleteCards","cardsDelete","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,wC,kBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,yJCW5BC,MATf,WACI,OACI,4BAAQC,UAAU,UACd,yBAAKA,UAAU,mBCHdC,EAAqBC,IAAMC,cAAc,IC6CvCC,MA3Cf,YAAuF,IAAxEC,EAAuE,EAAvEA,KAAMC,EAAiE,EAAjEA,KAAMC,EAA2D,EAA3DA,MAAOC,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,IAAKC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,aAC7DC,EAAcX,IAAMY,WAAWb,GAE/Bc,EAAQP,EAAMC,MAAQI,EAAYJ,IAElCO,EAAyB,0BACRD,EAAQ,GAAK,4BAG9BE,EAAUV,EAAMW,MAAK,SAAAC,GAAC,OAAIA,EAAEV,MAAQI,EAAYJ,OAEhDW,EAAuB,wBACRH,EAAU,uBAAyB,IAgBxD,OACI,yBAAKjB,UAAU,WACX,4BAAQqB,KAAK,SAASrB,UAAWgB,EAA2BM,QANpE,WACIV,EAAaH,MAMT,yBAAKT,UAAU,eAAeuB,IAAG,UAAKjB,GAAQkB,IAAG,UAAKnB,GAAQiB,QAftE,WACKZ,EAAY,CAACL,OAAMC,YAehB,yBAAKN,UAAU,kBACX,wBAAIA,UAAU,kBAAkBK,GAChC,6BACI,4BAAQgB,KAAK,SAASrB,UAAWoB,EAAyBE,QAf1E,WACIX,EAAW,CAACF,MAAKF,aAeL,wBAAIP,UAAU,uBAAuBO,EAAMkB,Y,gCCChDC,MAnCf,SAAcC,GACV,IAAMd,EAAcX,IAAMY,WAAWb,GAErC,OACI,0BAAMD,UAAU,WACZ,6BAASA,UAAU,WACf,yBAAKA,UAAU,sBACX,4BAAQqB,KAAK,SAASrB,UAAU,uBAAuBsB,QAASK,EAAMC,cAClE,yBAAK5B,UAAU,kBAAkBuB,IAAG,UAAKV,EAAYgB,QAAUL,IAAI,yCACnE,yBAAKxB,UAAU,sBAEnB,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,wBACX,wBAAIA,UAAU,kBAAkBa,EAAYR,MAC5C,4BAAQgB,KAAK,SAASrB,UAAU,uBAAuBsB,QAASK,EAAMG,eAClE,yBAAK9B,UAAU,oBAAoBuB,IAAKQ,IAAeP,IAAI,gIAGnE,uBAAGxB,UAAU,qBAAqBa,EAAYmB,SAGtD,4BAAQX,KAAK,SAASrB,UAAU,sBAAsBsB,QAASK,EAAMM,YACjE,yBAAKjC,UAAU,mBAAmBuB,IAAKW,IAAWV,IAAI,wGAI9D,6BAASxB,UAAU,YACd2B,EAAMQ,MAAMC,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,iBAAUA,EAAV,CAAgBC,IAAKD,EAAK5B,IAAMC,YAAaiB,EAAMjB,YAAaC,WAAYgB,EAAMhB,WAAYC,aAAce,EAAMf,sBCvB3H2B,MATf,WACI,OACI,4BAAQvC,UAAU,UACd,uBAAGA,UAAU,gBAAb,4B,gBCcGwC,MAff,SAAoBb,GAEhB,OACA,yBAAK3B,UAAS,iCAA4B2B,EAAMc,OAAU,aAAe,KACrE,yBAAKzC,UAAU,0BACX,4BAAQqB,KAAK,SAASrB,UAAU,sBAAsBsB,QAASK,EAAMe,SACjE,yBAAK1C,UAAU,eAAeuB,IAAKoB,IAAWnB,IAAI,+EAEtD,yBAAKxB,UAAU,oBAAoBuB,IAAKI,EAAMiB,KAAKtC,KAAMkB,IAAI,KAC7D,wBAAIxB,UAAU,qBAAqB2B,EAAMiB,KAAKvC,S,eCqI3CwC,EARH,I,WAzIR,cAA6B,IAAhBC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,QAAU,oBAC5BC,KAAKF,IAAMA,EACXE,KAAKD,QAAUA,E,0DAKX,OAAOE,MAAM,GAAD,OAAID,KAAKF,IAAT,UAAsB,CAC9BI,OAAQ,MACRH,QAASC,KAAKD,UAEbI,MAAK,SAACC,GACH,OAAGA,EAAIC,GACID,EAAIE,OAERC,QAAQC,OAAR,gDAA0BJ,EAAIK,c,kCAM7C,OAAOR,MAAM,GAAD,OAAID,KAAKF,IAAT,aAAyB,CACjCI,OAAQ,MACRH,QAASC,KAAKD,UAEbI,MAAK,SAACC,GACH,OAAGA,EAAIC,GACID,EAAIE,OAERC,QAAQC,OAAR,gDAA0BJ,EAAIK,c,mCAKpCC,GACT,OAAOT,MAAM,GAAD,OAAID,KAAKF,IAAT,aAAyB,CACjCI,OAAQ,QACRH,QAASC,KAAKD,QACdY,KAAMC,KAAKC,UAAU,CACjBxD,KAAMqD,EAAMrD,KACZ2B,MAAO0B,EAAM1B,UAGhBmB,MAAK,SAACC,GACH,OAAGA,EAAIC,GACID,EAAIE,OAERC,QAAQC,OAAR,gDAA0BJ,EAAIK,c,kCAKrCC,GACR,OAAOT,MAAM,GAAD,OAAID,KAAKF,IAAT,UAAsB,CAC9BI,OAAQ,OACRH,QAASC,KAAKD,QACdY,KAAMC,KAAKC,UAAU,CACjBxD,KAAMqD,EAAMrD,KACZC,KAAMoD,EAAMpD,SAGf6C,MAAK,SAACC,GACH,OAAGA,EAAIC,GACID,EAAIE,OAERC,QAAQC,OAAR,gDAA0BJ,EAAIK,c,uCAKhCC,GACb,OAAOT,MAAM,GAAD,OAAID,KAAKF,IAAT,oBAAgC,CACxCI,OAAQ,QACRH,QAASC,KAAKD,QACdY,KAAMC,KAAKC,UAAU,CACjBhC,OAAQ6B,EAAM7B,WAGjBsB,MAAK,SAACC,GACH,OAAGA,EAAIC,GACID,EAAIE,OAERC,QAAQC,OAAR,gDAA0BJ,EAAIK,c,mCAKpCK,GACT,OAAOb,MAAM,GAAD,OAAID,KAAKF,IAAT,wBAA4BgB,GAAM,CAC1CZ,OAAQ,MACRH,QAASC,KAAKD,UAEbI,MAAK,SAACC,GACH,OAAGA,EAAIC,GACID,EAAIE,OAERC,QAAQC,OAAR,gDAA0BJ,EAAIK,c,sCAKjCK,GACZ,OAAOb,MAAM,GAAD,OAAID,KAAKF,IAAT,wBAA4BgB,GAAM,CAC1CZ,OAAQ,SACRH,QAASC,KAAKD,UAEbI,MAAK,SAACC,GACH,OAAGA,EAAIC,GACID,EAAIE,OAERC,QAAQC,OAAR,gDAA0BJ,EAAIK,c,kCAKrCK,GACR,OAAOb,MAAM,GAAD,OAAID,KAAKF,IAAT,kBAAsBgB,GAAM,CACpCZ,OAAQ,SACRH,QAASC,KAAKD,UAEbI,MAAK,SAACC,GACH,OAAGA,EAAIC,GACID,EAAIE,OAERC,QAAQC,OAAR,gDAA0BJ,EAAIK,c,2CAI3BK,EAAI7C,GACrB,OAAOA,EACD+B,KAAKe,aAAaD,GAClBd,KAAKgB,gBAAgBF,O,KAMxB,CAAQ,CAChBhB,IAAK,8CACLC,QAAS,CACLkB,cAAe,uCACf,eAAgB,sBCxHTC,MAnBf,SAAwBvC,GACpB,OACI,yBAAK3B,UAAS,sBAAiB2B,EAAMtB,KAAvB,YAA+BsB,EAAMc,SAC/C,yBAAKzC,UAAU,oBACX,4BAAQqB,KAAK,SAASrB,UAAU,sBAAsBsB,QAASK,EAAMe,SACjE,yBAAK1C,UAAU,eAAeuB,IAAKoB,IAAWnB,IAAI,+EAEtD,wBAAIxB,UAAU,gBAAgB2B,EAAMwC,OACpC,0BAAMC,OAAO,IAAI/D,KAAMsB,EAAMtB,KAAML,UAAU,eAAeqE,SAAU1C,EAAM0C,SAAUC,YAAU,GAC3F3C,EAAM4C,SACP,4BAAQlD,KAAK,SAASrB,UAAS,6BAAwB2B,EAAM6C,cAAgB,8BAAgC,IAAOC,SAAU9C,EAAM6C,eAAgB7C,EAAM+C,gBC4D/JC,MAlEf,SAA2BhD,GAEvB,IAAMd,EAAcX,IAAMY,WAAWb,GAFP,EAIJC,IAAM0E,SAAS,IAJX,mBAIvBvE,EAJuB,KAIhBwE,EAJgB,OAKU3E,IAAM0E,UAAS,GALzB,mBAKvBE,EALuB,KAKTC,EALS,OAMoB7E,IAAM0E,SAAS,IANnC,mBAMvBI,EANuB,KAMJC,EANI,OAQU/E,IAAM0E,SAAS,IARzB,mBAQvBM,EARuB,KAQTC,EARS,OASwBjF,IAAM0E,UAAS,GATvC,mBASvBQ,EATuB,KASFC,EATE,OAUkCnF,IAAM0E,SAAS,IAVjD,mBAUvBU,EAVuB,KAUGC,EAVH,KAmD9B,OANArF,IAAMsF,WAAU,WACZX,EAAQhE,EAAYR,MACpB8E,EAAetE,EAAYmB,OAX3B+C,GAAe,GACfE,EAAoB,IAEpBI,GAAsB,GACtBE,EAA2B,MAS5B,CAAC1E,EAAac,EAAMc,SAGnB,kBAAC,EAAD,CAAepC,KAAK,eAAe8D,MAAM,4HAAwBO,WAAW,yDAAYjC,OAAQd,EAAMc,OAAS,aAAe,GAAIC,QAAUf,EAAMe,QAAS2B,SA5B/J,SAAsBoB,GAElBA,EAAEC,iBAGF/D,EAAMgE,aAAa,CACftF,OACA2B,MAAOkD,KAqByKV,eAAgBM,IAAgBM,EAAoBb,SACpO,oCACI,2BAAOlD,KAAK,OAAOhB,KAAK,OAAOL,UAAU,iCAAiC4F,YAAY,qBAAMC,UAAQ,EAACC,UAAU,IAAIC,UAAU,KAAKC,aAAa,MAAMtC,MAAOrD,EAAM4F,SA1C9K,SAA0BR,GACtBZ,EAAQY,EAAES,OAAOxC,OACjBuB,EAAoBQ,EAAES,OAAOC,mBAC7BpB,GAAeU,EAAES,OAAOC,sBAwChB,0BAAMnG,UAAS,uBAAmB8E,EAAuC,GAAzB,wBAAgChB,GAAG,cAAckB,GAEjG,2BAAO3D,KAAK,OAAOhB,KAAK,UAAUL,UAAU,qCAAqC4F,YAAY,kCAASC,UAAQ,EAACC,UAAU,IAAIC,UAAU,MAAMC,aAAa,MAAMtC,MAAOwB,EAAae,SAvChM,SAAiCR,GAC7BN,EAAeM,EAAES,OAAOxC,OACxB6B,EAA2BE,EAAES,OAAOC,mBACpCd,GAAsBI,EAAES,OAAOC,sBAqCvB,0BAAMnG,UAAS,uBAAmBoF,EAA8C,GAAzB,wBAAgCtB,GAAG,iBAAiBwB,OC5B5Gc,MAjCf,SAA0BzE,GACtB,IAAM0E,EAAgBnG,IAAMoG,SADC,EAGepG,IAAM0E,UAAS,GAH9B,mBAGtB2B,EAHsB,KAGNC,EAHM,OAIyBtG,IAAM0E,SAAS,IAJxC,mBAItB6B,EAJsB,KAIDC,EAJC,KAqB7B,OACI,kBAAC,EAAD,CAAerG,KAAK,cAAc8D,MAAM,wFAAkBO,WAAW,yDAAYjC,OAAQd,EAAMc,OAAS,aAAe,GAAIC,QAAUf,EAAMe,QAAS2B,SAXxJ,SAAsBoB,GAClBA,EAAEC,iBAEF/D,EAAMgF,eAAe,CACjB9E,OAAQwE,EAAcO,QAAQlD,QAGlC2C,EAAcO,QAAQlD,MAAQ,IAI8Ic,eAAgB+B,EAAehC,SACvM,oCACI,2BAAOlD,KAAK,MAAMhB,KAAK,YAAYL,UAAU,wCACtC4F,YAAY,qGAAqBC,UAAQ,EAACG,aAAa,MAAMa,IAAKR,EAAeJ,SAnBpG,WACIS,EAAsBL,EAAcO,QAAQT,mBAC5CK,GAAiBH,EAAcO,QAAQT,sBAkB/B,0BAAMnG,UAAS,uBAAmBuG,EAAyC,GAAzB,wBAAgCzC,GAAG,mBAAmB2C,OC6BzGK,MAvDf,SAAwBnF,GAAQ,IAAD,EACOzB,IAAM0E,SAAS,IADtB,mBACpBmC,EADoB,KACTC,EADS,OAEqB9G,IAAM0E,UAAS,GAFpC,mBAEpBqC,EAFoB,KAEFC,EAFE,OAG+BhH,IAAM0E,SAAS,IAH9C,mBAGpBuC,EAHoB,KAGGC,EAHH,OAKDlH,IAAM0E,SAAS,IALd,mBAKpBtE,EALoB,KAKb+G,EALa,OAManH,IAAM0E,UAAS,GAN5B,mBAMpB0C,EANoB,KAMNC,EANM,OAOuBrH,IAAM0E,SAAS,IAPtC,mBAOpB4C,EAPoB,KAODC,EAPC,KAuC3B,OACI,kBAAC,EAAD,CAAepH,KAAK,WAAW8D,MAAM,gEAAcO,WAAW,6CAAUjC,OAAQd,EAAMc,OAAS,aAAe,GAAIC,QAAUf,EAAMe,QAAS2B,SAd/I,SAAsBoB,GAElBA,EAAEC,iBAGF/D,EAAMM,WAAW,CACb5B,KAAM0G,EACNzG,KAAMA,IAXV0G,EAAY,IACZK,EAAQ,KAiB2J7C,eAAgByC,IAAoBK,EAAa/C,SAChN,oCACI,2BAAOlD,KAAK,OAAOhB,KAAK,QAAQL,UAAU,kCAAkC4F,YAAY,mDAAWC,UAAQ,EACpGC,UAAU,IAAIC,UAAU,KAAKC,aAAa,MAAMtC,MAAOqD,EAAUd,SAlCpF,SAA0BR,GACtBuB,EAAYvB,EAAES,OAAOxC,OACrB0D,EAAwB3B,EAAES,OAAOC,mBACjCe,GAAmBzB,EAAES,OAAOC,sBAgCpB,0BAAMnG,UAAS,uBAAmBiH,EAA2C,GAAzB,wBAAgCnD,GAAG,eAAeqD,GAEtG,2BAAO9F,KAAK,MAAMhB,KAAK,MAAML,UAAU,iCAAiC4F,YAAY,qGAC7EC,UAAQ,EAACG,aAAa,MAAMtC,MAAOpD,EAAM2F,SAhC5D,SAA0BR,GACtB4B,EAAQ5B,EAAES,OAAOxC,OACjB+D,EAAoBhC,EAAES,OAAOC,mBAC7BoB,GAAe9B,EAAES,OAAOC,sBA8BhB,0BAAMnG,UAAS,uBAAmBsH,EAAuC,GAAzB,wBAAgCxD,GAAG,aAAa0D,OCjCjGE,MAff,SAA0B/F,GAUtB,OACI,kBAAC,EAAD,CAAetB,KAAK,cAAc8D,MAAM,2DAAcO,WAAW,eAAKjC,OAAQd,EAAMc,OAAS,aAAe,GAAIC,QAAUf,EAAMe,QAAS2B,SAT7I,SAAsBoB,GAElBA,EAAEC,iBAGF/D,EAAMgG,iBAAiBhG,EAAMiG,YC+KtBC,MA7Kf,WAAe,MAEiD3H,IAAM0E,UAAS,GAFhE,mBAEJkD,EAFI,KAEoBC,EAFpB,OAG2C7H,IAAM0E,UAAS,GAH1D,mBAGJoD,EAHI,KAGiBC,EAHjB,OAI+C/H,IAAM0E,UAAS,GAJ9D,mBAIJsD,EAJI,KAImBC,EAJnB,OAKqCjI,IAAM0E,UAAS,GALpD,mBAKJwD,EALI,KAKcC,EALd,OAMqCnI,IAAM0E,UAAS,GANpD,mBAMJ0D,EANI,KAMeC,EANf,OAOiBrI,IAAM0E,SAAS,IAPhC,mBAOJgD,EAPI,KAOIY,EAPJ,OAQ6BtI,IAAM0E,SAAS,IAR5C,mBAQJ6D,EARI,KAQUC,EARV,OAU2BxI,IAAM0E,SAAS,CACjDvE,KAAM,GACN2B,MAAO,GACPH,OAAQ,KAbD,mBAUJhB,EAVI,KAUS8H,EAVT,OAeezI,IAAM0E,SAAS,IAf9B,mBAeJzC,EAfI,KAeGyG,EAfH,KAkBX1I,IAAMsF,WAAU,WACZ3C,EAAIgG,YACC1F,MAAK,SAAC2F,GACHH,EAAeG,MAElBC,OAAM,SAACC,GACJC,QAAQC,IAAIF,MAEpBnG,EAAIsG,cACChG,MAAK,SAAC2F,GACHF,EAASE,MAEZC,OAAM,SAACC,GACJC,QAAQC,IAAIF,QAErB,IAiCH,IAwBMI,EAAiB,WACnBjB,GAAyB,GACzBJ,GAA0B,GAC1BE,GAAuB,GACvBI,GAAoB,GACpBE,GAAmB,IAIjBc,EAAW,SAACP,GACdH,EAAe,CACXtI,KAAMyI,EAAKzI,KACX2B,MAAO8G,EAAK9G,MACZH,OAAQiH,EAAKjH,OACbpB,IAAKqI,EAAKrI,OA4ClB,OACI,kBAACR,EAAmBqJ,SAApB,CAA6B5F,MAAO7C,GAChC,yBAAKb,UAAU,QACX,yBAAKA,UAAU,mBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAM8B,cAnFS,WAC3BiG,GAA0B,IAkF+B9F,WA/EjC,WACxBgG,GAAuB,IA+ELrG,aAxFQ,WAC1BuG,GAAyB,IAuF8BzH,YA5EnC,SAAC6I,GACrBb,EAAgBa,GAChBlB,GAAoB,IA0EiElG,MAAOA,EAC1ExB,WAxHtB,YAAuC,IAAdF,EAAa,EAAbA,IAEfQ,EAF4B,EAARV,MAEJW,MAAK,SAAAC,GAAC,OAAIA,EAAEV,MAAQI,EAAYJ,OAGtDoC,EAAI2G,qBAAqB/I,GAAMQ,GAASkC,MAAK,SAACsG,GAE1C,IAAMC,EAAWvH,EAAMC,KAAI,SAACuH,GAAD,OAAOA,EAAElJ,MAAQA,EAAMgJ,EAAUE,KAE5Df,EAASc,MAERX,OAAM,SAACC,GACJC,QAAQC,IAAIF,OA4G0BpI,aAxE/B,SAACH,GAChB8H,GAAmB,GACnBC,EAAU/H,MAuEE,kBAAC,EAAD,OAEJ,kBAAC,EAAD,CAAYmC,KAAM6F,EAAchG,OAAQ2F,EAAkB1F,QAAS0G,IAEnE,kBAAC,EAAD,CAAkB3G,OAAQqF,EAAwBpF,QAAS0G,EAAgBzD,aApD9D,SAACjC,GACtBb,EAAI+G,aAAalG,GACZP,MAAK,SAAC2F,GACHO,EAASP,GACTM,OAEHL,OAAM,SAACC,GACJC,QAAQC,IAAIF,SA+CZ,kBAAC,EAAD,CAAiBvG,OAAQyF,EAAuBxF,QAAS0G,EAAgBzC,eA3C1D,SAACjD,GACxBb,EAAIgH,iBAAiBnG,GAChBP,MAAK,SAAC2F,GACHO,EAASP,GACTM,OAEHL,OAAM,SAACC,GACJC,QAAQC,IAAIF,SAsCZ,kBAAC,EAAD,CAAevG,OAAQuF,EAAqBtF,QAAS0G,EAAgBnH,WAlCpD,SAACyB,GAC1Bb,EAAIiH,YAAYpG,GACXP,MAAK,SAAC2F,GACH,IAAMW,EAAU,CACZpJ,KAAMyI,EAAKzI,KACXC,KAAMwI,EAAKxI,KACXG,IAAKqI,EAAKrI,IACVF,MAAOuI,EAAKvI,MACZC,MAAOsI,EAAKtI,OAEhB4I,IACAR,EAAS,CAACa,GAAF,mBAActH,QAEzB4G,OAAM,SAACC,GACJC,QAAQC,IAAIF,SAsBZ,kBAAC,EAAD,CAAiBvG,OAAQ6F,EAAmB5F,QAAS0G,EAAgBxB,OAAQA,EAAQD,iBAnHjG,SAA0BlH,GAEtBoC,EAAIkH,YAAYtJ,GAAK0C,MAAK,WAEtB,IAAM6G,EAAc7H,EAAM8H,QAAO,SAACN,GAAD,OAAOA,EAAElJ,MAAQA,KAElDmI,EAASoB,GACTZ,OAECL,OAAM,SAACC,GACJC,QAAQC,IAAIF,YC9DRkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3H,MAAK,SAAA4H,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.fcaca764.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close-icon.5df32a06.svg\";","module.exports = __webpack_public_path__ + \"static/media/profile-pencil.6bfdb354.svg\";","module.exports = __webpack_public_path__ + \"static/media/button-add.b2fce4ac.svg\";","import React from \"react\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"header__logo\"></div>\r\n        </header>\r\n    );\r\n}\r\n\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nexport const CurrentUserContext = React.createContext({});\r\n","import React from \"react\";\r\nimport { CurrentUserContext } from \"../contexts/CurrentUserContext\"\r\n\r\n\r\nfunction Card({name, link, likes, owner, _id, onCardClick, onCardLike, onCardDelete}) {\r\n    const currentUser = React.useContext(CurrentUserContext);\r\n    // Определяем, являемся ли мы владельцем текущей карточки\r\n    const isOwn = owner._id === currentUser._id;\r\n    // Создаём переменную, которую после зададим в `className` для кнопки удаления\r\n    const cardDeleteButtonClassName = (\r\n        `element__delete ${isOwn ? '' : 'element__delete_inactive'}`\r\n    );\r\n    // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\r\n    const isLiked = likes.some(i => i._id === currentUser._id);\r\n    // Создаём переменную, которую после зададим в `className` для кнопки лайка\r\n    const cardLikeButtonClassName = (\r\n        `element__like ${isLiked ? 'element__like_active' : ''}`\r\n    );\r\n\r\n\r\n    function handleClick() {\r\n         onCardClick({name, link});\r\n    }\r\n\r\n    function handleLikeClick() {\r\n        onCardLike({_id, likes});\r\n    }\r\n\r\n    function handleDeleteClick() {\r\n        onCardDelete(_id);\r\n    }\r\n\r\n    return (\r\n        <div className=\"element\">\r\n            <button type=\"button\" className={cardDeleteButtonClassName} onClick={handleDeleteClick}></button>\r\n            <img className=\"element__img\" src={`${link}`} alt={`${name}`} onClick={handleClick} />\r\n            <div className=\"element__group\">\r\n                <h2 className=\"element__title\">{name}</h2>\r\n                <div>\r\n                    <button type=\"button\" className={cardLikeButtonClassName} onClick={handleLikeClick}></button>\r\n                    <h3 className=\"element__like_title\">{likes.length}</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card ;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport { CurrentUserContext } from \"../contexts/CurrentUserContext\"\r\nimport profilePencil from '../images/profile-pencil.svg'\r\nimport buttonAdd from '../images/button-add.svg'\r\n\r\nfunction Main(props) {\r\n    const currentUser = React.useContext(CurrentUserContext);\r\n\r\n    return (\r\n        <main className=\"content\">\r\n            <section className=\"profile\">\r\n                <div className=\"profile__container\">\r\n                    <button type=\"button\" className=\"profile__edit-avatar\" onClick={props.onEditAvatar}>\r\n                        <img className=\"profile__avatar\" src={`${currentUser.avatar}`} alt=\"Аватар\"  />\r\n                        <div className=\"profile__overlay\"></div>\r\n                    </button>\r\n                    <div className=\"profile__info\">\r\n                        <div className=\"profile__info-button\">\r\n                            <h1 className=\"profile__title\">{currentUser.name}</h1>\r\n                            <button type=\"button\" className=\"profile__edit-button\" onClick={props.onEditProfile}>\r\n                                <img className=\"profile__edit-img\" src={profilePencil} alt=\"Кнопка_редактирования\"/>\r\n                            </button>\r\n                        </div>\r\n                        <p className=\"profile__subtitle\">{currentUser.about}</p>\r\n                    </div>\r\n                </div>\r\n                <button type=\"button\" className=\"profile__add-button\" onClick={props.onAddPlace}>\r\n                    <img className=\"profile__add-img\" src={buttonAdd} alt=\"Кнопка_добавления\"/>\r\n                </button>\r\n            </section>\r\n\r\n            <section className=\"elements\">\r\n                {props.cards.map((item) => (\r\n                        <Card {...item} key={item._id}  onCardClick={props.onCardClick} onCardLike={props.onCardLike} onCardDelete={props.onCardDelete}/>\r\n                    ))}\r\n            </section>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Main;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <p className=\"footer__logo\">© 2020 Mesto Russia</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport closeIcon from '../images/close-icon.svg'\r\n\r\n\r\nfunction ImagePopup(props) {\r\n\r\n    return (\r\n    <div className={`modal modal_image-card ${props.isOpen  ? 'modal_open' : ''}`}>\r\n        <div className=\"modal__container-image\">\r\n            <button type=\"button\" className=\"modal__close-button\" onClick={props.onClose}>\r\n                <img className=\"modal__close\" src={closeIcon} alt=\"Кнопка_выхода\"/>\r\n            </button>\r\n            <img className=\"modal__image-open\" src={props.card.link} alt=\"\"/>\r\n            <h3 className=\"modal__title-open\">{props.card.name}</h3>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default ImagePopup ;"," class Api {\r\n    constructor({url, headers}) {\r\n    this.url = url;\r\n    this.headers = headers;\r\n    }\r\n\r\n    // Получаем массив карточек\r\n    getAllCards() {\r\n        return fetch(`${this.url}/cards`, {\r\n            method: 'GET',\r\n            headers: this.headers\r\n        })\r\n            .then((res) => {\r\n                if(res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(`Ошибка: ${res.status}`);\r\n            });\r\n    }\r\n\r\n    //Загружаем информацию о пользователе с сервера\r\n    getUserMe() {\r\n        return fetch(`${this.url}/users/me`, {\r\n            method: 'GET',\r\n            headers: this.headers\r\n        })\r\n            .then((res) => {\r\n                if(res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(`Ошибка: ${res.status}`);\r\n            });\r\n    }\r\n\r\n    //Сохраняем отредактированные данные профиля\r\n    patchUsersMe(value) {\r\n        return fetch(`${this.url}/users/me`, {\r\n            method: 'PATCH',\r\n            headers: this.headers,\r\n            body: JSON.stringify({\r\n                name: value.name,\r\n                about: value.about\r\n            })\r\n        })\r\n            .then((res) => {\r\n                if(res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(`Ошибка: ${res.status}`);\r\n            });\r\n    }\r\n\r\n    //добавляем новую карточку\r\n    postAddCard(value) {\r\n        return fetch(`${this.url}/cards`, {\r\n            method: 'POST',\r\n            headers: this.headers,\r\n            body: JSON.stringify({\r\n                name: value.name,\r\n                link: value.link\r\n            })\r\n        })\r\n            .then((res) => {\r\n                if(res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(`Ошибка: ${res.status}`);\r\n            });\r\n    }\r\n\r\n    //Обновление аватара пользователя\r\n    patchUsersAvatar(value) {\r\n        return fetch(`${this.url}/users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: this.headers,\r\n            body: JSON.stringify({\r\n                avatar: value.avatar\r\n            })\r\n        })\r\n            .then((res) => {\r\n                if(res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(`Ошибка: ${res.status}`);\r\n            });\r\n    }\r\n\r\n    //Запрос на лайк карточки\r\n    putLikeCards(id) {\r\n        return fetch(`${this.url}/cards/likes/${id}`, {\r\n            method: 'PUT',\r\n            headers: this.headers,\r\n        })\r\n            .then((res) => {\r\n                if(res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(`Ошибка: ${res.status}`);\r\n            });\r\n    }\r\n\r\n    //Запрос на снятие лайка\r\n    deleteLikeCards(id) {\r\n        return fetch(`${this.url}/cards/likes/${id}`, {\r\n            method: 'DELETE',\r\n            headers: this.headers,\r\n        })\r\n            .then((res) => {\r\n                if(res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(`Ошибка: ${res.status}`);\r\n            });\r\n    }\r\n\r\n    //Запрос на удаление карточки\r\n    deleteCards(id) {\r\n        return fetch(`${this.url}/cards/${id}`, {\r\n            method: 'DELETE',\r\n            headers: this.headers,\r\n        })\r\n            .then((res) => {\r\n                if(res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(`Ошибка: ${res.status}`);\r\n            });\r\n    }\r\n\r\n     changeLikeCardStatus(id, isLiked) {\r\n         return isLiked\r\n             ? this.putLikeCards(id)\r\n             : this.deleteLikeCards(id)\r\n     }\r\n\r\n}\r\n\r\n\r\nconst api = new Api({\r\n    url: 'https://mesto.nomoreparties.co/v1/cohort-15',\r\n    headers: {\r\n        authorization: '179efea0-82b8-4273-a721-e2de6a729aed',\r\n        'Content-type': 'application/json'\r\n    }\r\n});\r\n\r\nexport default api;","import React from \"react\";\r\nimport closeIcon from '../images/close-icon.svg'\r\n\r\nfunction PopupWithForm (props) {\r\n    return (\r\n        <div className={`modal modal_${props.name} ${props.isOpen}`}>\r\n            <div className=\"modal__container\">\r\n                <button type=\"button\" className=\"modal__close-button\" onClick={props.onClose}>\r\n                    <img className=\"modal__close\" src={closeIcon} alt=\"Кнопка_выхода\"/>\r\n                </button>\r\n                <h2 className=\"modal__title\">{props.title}</h2>\r\n                <form action=\"#\" name={props.name} className=\"modal__field\" onSubmit={props.onSubmit} noValidate>\r\n                    {props.children}\r\n                    <button type=\"submit\" className={`modal__button-save ${props.submitIsValid ? 'modal__button-save_disabled' : '' }`} disabled={props.submitIsValid}>{props.buttonText}\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default PopupWithForm ;","import React from \"react\";\r\nimport PopupWithForm from \"./PopupWithForm\";\r\nimport {CurrentUserContext} from \"../contexts/CurrentUserContext\";\r\n\r\n\r\n\r\n\r\nfunction EditProfilePopup (props) {\r\n    // Подписка на контекст\r\n    const currentUser = React.useContext(CurrentUserContext);\r\n\r\n    const [name , setName ] = React.useState('');\r\n    const [nameIsValid , setNameIsValid ] = React.useState(true);\r\n    const [nameErrorMessage , setNameErrorMessage ] = React.useState('');\r\n\r\n    const [description , setDescription ] = React.useState('');\r\n    const [descriptionIsValid , setDescriptionIsValid ] = React.useState(true);\r\n    const [descriptionErrorMessage , setDescriptionErrorMessage ] = React.useState('');\r\n\r\n    function handleNameChange(e) {\r\n        setName(e.target.value);\r\n        setNameErrorMessage(e.target.validationMessage);\r\n        setNameIsValid(e.target.validationMessage ? false : true)\r\n    }\r\n\r\n    function handleDescriptionChange(e) {\r\n        setDescription(e.target.value);\r\n        setDescriptionErrorMessage(e.target.validationMessage);\r\n        setDescriptionIsValid(e.target.validationMessage ? false : true)\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        // Запрещаем браузеру переходить по адресу формы\r\n        e.preventDefault();\r\n\r\n        // Передаём значения управляемых компонентов во внешний обработчик\r\n        props.onUpdateUser({\r\n            name,\r\n            about: description,\r\n        });\r\n    }\r\n\r\n    function resetAllInput () {\r\n        setNameIsValid(true)\r\n        setNameErrorMessage('');\r\n\r\n        setDescriptionIsValid(true)\r\n        setDescriptionErrorMessage('');\r\n    }\r\n\r\n    // После загрузки текущего пользователя из API\r\n    // его данные будут использованы в управляемых компонентах.\r\n    React.useEffect(() => {\r\n        setName(currentUser.name);\r\n        setDescription(currentUser.about);\r\n        resetAllInput();\r\n    }, [currentUser, props.isOpen]);\r\n\r\n    return (\r\n        <PopupWithForm name=\"edit-profile\" title=\"Редактировать профиль\" buttonText=\"Сохранить\" isOpen={props.isOpen ? 'modal_open' : ''} onClose ={props.onClose} onSubmit={handleSubmit}  submitIsValid={!nameIsValid || !descriptionIsValid} children={\r\n            <>\r\n                <input type=\"text\" name=\"name\" className=\"modal__input modal__input_name\" placeholder=\"Имя\" required minLength=\"2\" maxLength=\"40\" autoComplete=\"off\" value={name} onChange={handleNameChange}/>\r\n                <span className={`modal__error ${!nameIsValid ? 'modal__error_visible' : '' }`} id=\"name-error\">{nameErrorMessage}</span>\r\n\r\n                <input type=\"text\" name=\"aboutMe\" className=\"modal__input modal__input_about-me\" placeholder=\"О себе\" required minLength=\"2\" maxLength=\"200\" autoComplete=\"off\" value={description} onChange={handleDescriptionChange}/>\r\n                <span className={`modal__error ${!descriptionIsValid ? 'modal__error_visible' : '' }`} id=\"aboutMe-error\">{descriptionErrorMessage}</span>\r\n            </>\r\n        }\r\n        />\r\n    );\r\n}\r\n\r\n\r\nexport default EditProfilePopup ;","import PopupWithForm from \"./PopupWithForm\";\r\nimport React from \"react\";\r\n\r\n\r\nfunction EditAvatarPopup (props) {\r\n    const userAvatarRef = React.useRef();\r\n\r\n    const [avatarIsValid , setAvatarIsValid ] = React.useState(false);\r\n    const [avatarErrorMessage , setAvatarErrorMessage ] = React.useState('');\r\n\r\n    function handleAvatarChange() {\r\n        setAvatarErrorMessage(userAvatarRef.current.validationMessage);\r\n        setAvatarIsValid(userAvatarRef.current.validationMessage ? false : true)\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        props.onUpdateAvatar({\r\n            avatar: userAvatarRef.current.value\r\n        });\r\n\r\n        userAvatarRef.current.value = '';\r\n    }\r\n\r\n    return (\r\n        <PopupWithForm name=\"edit-avatar\" title=\"Обновить аватар\" buttonText=\"Сохранить\" isOpen={props.isOpen ? 'modal_open' : ''} onClose ={props.onClose} onSubmit={handleSubmit} submitIsValid={!avatarIsValid} children={\r\n            <>\r\n                <input type=\"url\" name=\"urlAvatar\" className=\"modal__input modal__input_link-avatar\"\r\n                       placeholder=\"Ссылка на картинку\" required autoComplete=\"off\" ref={userAvatarRef} onChange={handleAvatarChange}/>\r\n                <span className={`modal__error ${!avatarIsValid ? 'modal__error_visible' : '' }`} id=\"urlAvatar-error\">{avatarErrorMessage}</span>\r\n            </>\r\n        }\r\n        />\r\n    );\r\n}\r\n\r\nexport default EditAvatarPopup ;","import React from \"react\";\r\nimport PopupWithForm from \"./PopupWithForm\";\r\n\r\n\r\nfunction AddPlacePopup (props) {\r\n    const [cardName , setCardName ] = React.useState('');\r\n    const [cardNameIsValid , setCardNameIsValid ] = React.useState(false);\r\n    const [cardNameErrorMessage , setCardNameErrorMessage ] = React.useState('');\r\n\r\n    const [link , setLink ] = React.useState('');\r\n    const [linkIsValid , setLinkIsValid ] = React.useState(false);\r\n    const [linkErrorMessage , setLinkErrorMessage ] = React.useState('');\r\n\r\n    function handleNameChange(e) {\r\n        setCardName(e.target.value);\r\n        setCardNameErrorMessage(e.target.validationMessage);\r\n        setCardNameIsValid(e.target.validationMessage ? false : true)\r\n    }\r\n\r\n    function handleLinkChange(e) {\r\n        setLink(e.target.value);\r\n        setLinkErrorMessage(e.target.validationMessage);\r\n        setLinkIsValid(e.target.validationMessage ? false : true)\r\n    }\r\n\r\n    function resetAllInput () {\r\n        setCardName('');\r\n        setLink('');\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        // Запрещаем браузеру переходить по адресу формы\r\n        e.preventDefault();\r\n\r\n        // Передаём значения управляемых компонентов во внешний обработчик\r\n        props.onAddPlace({\r\n            name: cardName,\r\n            link: link\r\n        });\r\n\r\n        resetAllInput();\r\n    }\r\n\r\n    return (\r\n        <PopupWithForm name=\"add-card\" title=\"Новое место\" buttonText=\"Создать\" isOpen={props.isOpen ? 'modal_open' : ''} onClose ={props.onClose} onSubmit={handleSubmit} submitIsValid={!cardNameIsValid || !linkIsValid} children={\r\n            <>\r\n                <input type=\"text\" name=\"plase\" className=\"modal__input modal__input_plase\" placeholder=\"Название\" required\r\n                       minLength=\"1\" maxLength=\"30\" autoComplete=\"off\" value={cardName} onChange={handleNameChange}/>\r\n                <span className={`modal__error ${!cardNameIsValid ? 'modal__error_visible' : '' }`} id=\"plase-error\">{cardNameErrorMessage}</span>\r\n\r\n                <input type=\"url\" name=\"url\" className=\"modal__input modal__input_link\" placeholder=\"Ссылка на картинку\"\r\n                       required autoComplete=\"off\" value={link} onChange={handleLinkChange}/>\r\n                <span className={`modal__error ${!linkIsValid ? 'modal__error_visible' : '' }`} id=\"url-error\">{linkErrorMessage}</span>\r\n            </>\r\n        }\r\n        />\r\n    );\r\n}\r\n\r\nexport default AddPlacePopup  ;","import PopupWithForm from \"./PopupWithForm\";\r\nimport React from \"react\";\r\n\r\n\r\nfunction DeleteCardPopup (props) {\r\n\r\n    function handleSubmit(e) {\r\n        // Запрещаем браузеру переходить по адресу формы\r\n        e.preventDefault();\r\n\r\n        // Передаём значения управляемых компонентов во внешний обработчик\r\n        props.handleCardDelete(props.cardId);\r\n    }\r\n\r\n    return (\r\n        <PopupWithForm name=\"delete-card\" title=\"Вы уверены?\" buttonText=\"Да\" isOpen={props.isOpen ? 'modal_open' : ''} onClose ={props.onClose} onSubmit={handleSubmit}/>\r\n    );\r\n}\r\n\r\nexport default DeleteCardPopup;","import React from 'react';\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport ImagePopup from './ImagePopup'\nimport {CurrentUserContext} from \"../contexts/CurrentUserContext\"\nimport api from \"../utils/Api\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport DeleteCardPopup from \"./DeleteCardPopup\";\n\n\nfunction App() {\n    // Переменные, отвечающие за видимость модалок\n    const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n    const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n    const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n    const [isImagePopupOpen, setIsImagePopupOpen] = React.useState(false);\n    const [isDeleteCardPopup, setDeleteCardPopup] = React.useState(false);\n    const [cardId, setCardId] = React.useState({});\n    const [selectedCard, setSelectedCard] = React.useState({});\n\n    const [currentUser, setCurrentUser] = React.useState({\n        name: '',\n        about: '',\n        avatar: ''\n    });\n    const [cards, setCards] = React.useState([]);\n    //\n\n    React.useEffect(() => {\n        api.getUserMe()\n            .then((data) => {\n                setCurrentUser(data);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n        api.getAllCards()\n            .then((data) => {\n                setCards(data);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }, []);\n\n    function handleCardLike({_id, likes}) {\n        // Снова проверяем, есть ли уже лайк на этой карточке\n        const isLiked = likes.some(i => i._id === currentUser._id);\n\n        // Отправляем запрос в API и получаем обновлённые данные карточки\n        api.changeLikeCardStatus(_id, !isLiked).then((newCard) => {\n            // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n            const newCards = cards.map((c) => c._id === _id ? newCard : c);\n            // Обновляем стейт\n            setCards(newCards);\n        })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    function handleCardDelete(_id) {\n        // Отправляем запрос в API и получаем обновлённые данные карточки\n        api.deleteCards(_id).then(() => {\n            // Формируем новый массив на основе имеющегося, удаляя из него выбранную карточку\n            const cardsDelete = cards.filter((c) => c._id !== _id);\n            // Обновляем стейт\n            setCards(cardsDelete);\n            closeAllPopups();\n        })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    //Обработчики событий, открывающие модалки\n    const handleEditAvatarClick = () => {\n        setIsEditAvatarPopupOpen(true);\n    }\n\n    const handleEditProfileClick = () => {\n        setIsEditProfilePopupOpen(true);\n    }\n\n    const handleAddPlaceClick = () => {\n        setIsAddPlacePopupOpen(true);\n    }\n\n    const handleCardClick = (cardData) => {\n        setSelectedCard(cardData);\n        setIsImagePopupOpen(true);\n    }\n\n    const DeleteCard = (_id) => {\n        setDeleteCardPopup(true);\n        setCardId(_id)\n    }\n    //\n\n    //Обработчик событий, закрывающий все модалки\n    const closeAllPopups = () => {\n        setIsEditAvatarPopupOpen(false);\n        setIsEditProfilePopupOpen(false);\n        setIsAddPlacePopupOpen(false);\n        setIsImagePopupOpen(false);\n        setDeleteCardPopup(false);\n    }\n    //\n\n    const userInfo = (data) => {\n        setCurrentUser({\n            name: data.name,\n            about: data.about,\n            avatar: data.avatar,\n            _id: data._id\n        });\n    }\n\n    const handleUpdateUser = (value) => {\n        api.patchUsersMe(value)\n            .then((data) => {\n                userInfo(data);\n                closeAllPopups();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    const handleUpdateAvatar = (value) => {\n        api.patchUsersAvatar(value)\n            .then((data) => {\n                userInfo(data);\n                closeAllPopups();\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    const handleAddPlaceSubmit = (value) => {\n        api.postAddCard(value)\n            .then((data) => {\n                const newCard = {\n                    name: data.name,\n                    link: data.link,\n                    _id: data._id,\n                    likes: data.likes,\n                    owner: data.owner\n                }\n                closeAllPopups();\n                setCards([newCard, ...cards]);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    return (\n        <CurrentUserContext.Provider value={currentUser}>\n            <div className=\"page\">\n                <div className=\"page__container\">\n                    <Header/>\n                    <Main onEditProfile={handleEditProfileClick} onAddPlace={handleAddPlaceClick}\n                          onEditAvatar={handleEditAvatarClick} onCardClick={handleCardClick} cards={cards}\n                          onCardLike={handleCardLike} onCardDelete={DeleteCard}/>\n                    <Footer/>\n                </div>\n                <ImagePopup card={selectedCard} isOpen={isImagePopupOpen} onClose={closeAllPopups}/>\n\n                <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={handleUpdateUser}/>\n\n                <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={handleUpdateAvatar}/>\n\n                <AddPlacePopup isOpen={isAddPlacePopupOpen} onClose={closeAllPopups} onAddPlace={handleAddPlaceSubmit}/>\n\n                <DeleteCardPopup isOpen={isDeleteCardPopup} onClose={closeAllPopups} cardId={cardId} handleCardDelete={handleCardDelete}/>\n\n            </div>\n        </CurrentUserContext.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}